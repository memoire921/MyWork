package j10_Exception;

import java.util.Scanner;

// ** AgeException 1 : UnChecked
// => 즉, 컴파일러가 예외처리(try~catch~)를 확인하지 않음
// => 주로 프로그래머의 실수로 발생 가능한 오류들
// => 나이의 값이 범위를 벗어나면 Exception 발생

class AgeException extends RuntimeException {
	private static final long serialVersionUID = 1L;
	
	AgeException() { super("나이값이 범위를 벗어남"); }
	AgeException(String message) { super(message); }
} //AgeException

class AgeExceptionCk extends Exception {
	private static final long serialVersionUID = 1L;
	
	AgeExceptionCk() { super("Age Error_Checked"); }
	AgeExceptionCk(String message) { super(message); }
} //AgeExceptionCk


public class Ex08_MyExceptionUn {
	
	// ** 나이 입력받아 return 하는 메서드 만들기
	
	// 1) UnChecked Exception
	// => 예외처리코드를 컴파일시에 확인하지않음
	public static int readAge() {
		Scanner sc = new Scanner(System.in);
		System.out.println("** 나이를 입력 하세요 => ");
		int age = sc.nextInt(); //문자입력시 -> InputMismatchException
		sc.close();
		if (age < 1 || age > 200) throw new AgeException();
		else return age;
	}
	
	// 2) Checked Exception
	public static int readAgeCk() {
		Scanner sc = new Scanner(System.in);
		System.out.println("** 나이를 입력 하세요 => ");
		int age = Integer.parseInt(sc.nextLine()); //문자입력시 -> NumberFormatException
		sc.close();
		if (age < 1 || age > 200) throw new AgeExceptionCk();
		else return age;
	}
	
	public static void main(String[] args) {
		// Test 1) UnChecked Test
		// => 예외처리코드를 컴파일시에 확인하지않음
		//    그러나 런타임시에 오류가 발생하면 비정상종료함
		//System.out.println("** main Test 1) age1 = " + readAge());
		
		// => 예외처리적용
		try {
			System.out.println("** main Test 1) age2 = " + readAge());
		} catch (Exception e) {
			System.out.println("** main Exception => " + e.toString());
		}
		
		System.out.println("** Program 정상종료 **");
	} //main

} //class
