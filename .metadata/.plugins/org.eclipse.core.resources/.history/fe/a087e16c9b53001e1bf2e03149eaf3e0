package j13_generic;

// ** Generic Class Test 
// ** FruitBox 만들기
// => Apple, Banana 등 모든 과일을 담을수 있는 Generic FruitBox class 를 만들어 보세요.
//    단 과일들만 담을 수 있어야 함.
//    ( 자율적으로 해보시면 됩니다. )
//    힌트: Apple, Banana 등 각종 과일들이 class 이고, 
//         이들은 과일(Fruit) 로 구분 될 수 있어야함.   
// => 실습
//  -> 1) Fruit 만들기
//  -> 2) 과일 클래스들 만들기 (3개)
//  -> 3) FruitBox 만들기 
//      : 과일배열선언, 과일들담기_setter, 과일들출력메서드_fruitPrint()
//  -> 4) main 완성하기

class Fruit { public String toString() { return "I am Fruit"; }}
class Apple extends Fruit { public String toString() { return "I am Apple"; }}
class Banana extends Fruit { public String toString() { return "I am Banana"; }}
class Lemon extends Fruit { public String toString() { return "I am Lemon"; }}

class Tomato { public String toString() { return "I am Tomato"; }}

// ** FruitBox 만들기
// => Apple, Banana 등 과일만 담을수있는 Generic FruitBox class
// => F : Type 제한 없음
class FruitBoxA<F> {
	private F[] arr;
	public void setArr(F[] arr) { this.arr = arr; }
	public void fruitPrint() {
		for ( F a : arr ) {
			System.out.println(a);
		} //for
	} //fruitPrint
} //FruitBoxA

// => F : Fruit Type 으로 제한 -> Fruit 의 후손 클래스들만 허용
class FruitBox<F> {
	private F[] arr;
	public void setArr(F[] arr) { this.arr = arr; }
	public void fruitPrint() {
		for ( F a : arr ) {
			System.out.println(a);
		} //for
	} //fruitPrint
} //FruitBox

public class Ex03_FruitBox {

	public static void main(String[] args) {
		// 1) 종합 선물Set
		// => 모든 객체들을 다 담을수있음
		Object[] oarr = { new Apple(), new Banana(), new Lemon() };
		FruitBoxA fb1 = new FruitBoxA();
		fb1.setArr(oarr);
		fb1.fruitPrint();
		
		Tomato[] tarr = { new Tomato(), new Tomato(), new Tomato() };
		FruitBoxA<Tomato> fb2 = new FruitBoxA<Tomato>();
		fb2.setArr(tarr);
		fb2.fruitPrint();
		
		// 2) Fruit 선물Set
		
		
	} //main

} //class
